// <auto-generated />
using System;
using ForcegetTaskServer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MyAngularAppServer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ForcegetTaskServer.Models.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ForcegetTaskServer.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ForcegetTaskServer.Models.CountryCity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CountriesCities");
                });

            modelBuilder.Entity("ForcegetTaskServer.Models.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("ForcegetTaskServer.Models.Incoterm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Incoterms");
                });

            modelBuilder.Entity("ForcegetTaskServer.Models.Mode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Modes");
                });

            modelBuilder.Entity("ForcegetTaskServer.Models.MovementType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MovementTypes");
                });

            modelBuilder.Entity("ForcegetTaskServer.Models.PackageType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PackageTypes");
                });

            modelBuilder.Entity("ForcegetTaskServer.Models.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountryCitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IncotermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MovementTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PackageTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Unit1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Unit2Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CountryCitiesId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("IncotermId");

                    b.HasIndex("ModeId");

                    b.HasIndex("MovementTypeId");

                    b.HasIndex("PackageTypeId");

                    b.HasIndex("Unit1Id");

                    b.HasIndex("Unit2Id");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("ForcegetTaskServer.Models.Unit1", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Unit1s");
                });

            modelBuilder.Entity("ForcegetTaskServer.Models.Unit2", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Unit2s");
                });

            modelBuilder.Entity("ForcegetTaskServer.Models.Shipment", b =>
                {
                    b.HasOne("ForcegetTaskServer.Models.CountryCity", "CountryCities")
                        .WithMany()
                        .HasForeignKey("CountryCitiesId");

                    b.HasOne("ForcegetTaskServer.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("ForcegetTaskServer.Models.Incoterm", "Incoterm")
                        .WithMany()
                        .HasForeignKey("IncotermId");

                    b.HasOne("ForcegetTaskServer.Models.Mode", "Mode")
                        .WithMany()
                        .HasForeignKey("ModeId");

                    b.HasOne("ForcegetTaskServer.Models.MovementType", "MovementType")
                        .WithMany()
                        .HasForeignKey("MovementTypeId");

                    b.HasOne("ForcegetTaskServer.Models.PackageType", "PackageType")
                        .WithMany()
                        .HasForeignKey("PackageTypeId");

                    b.HasOne("ForcegetTaskServer.Models.Unit1", "Unit1")
                        .WithMany()
                        .HasForeignKey("Unit1Id");

                    b.HasOne("ForcegetTaskServer.Models.Unit2", "Unit2")
                        .WithMany()
                        .HasForeignKey("Unit2Id");

                    b.Navigation("CountryCities");

                    b.Navigation("Currency");

                    b.Navigation("Incoterm");

                    b.Navigation("Mode");

                    b.Navigation("MovementType");

                    b.Navigation("PackageType");

                    b.Navigation("Unit1");

                    b.Navigation("Unit2");
                });
#pragma warning restore 612, 618
        }
    }
}
